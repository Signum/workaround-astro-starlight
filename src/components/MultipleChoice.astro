<multiple-choice data-correct-label={"Correct"} data-incorrect-label={"Wrong"}>
  <form onsubmit="event.preventDefault()">
    <ol class="opt-list not-content"><slot /></ol>
    <div class="footer">
      <button class="submit" type="submit" disabled>
        {"Submit"}
      </button>
      <div class="answer sr-only" role="alert"></div>
    </div>
  </form>
</multiple-choice>

<style>
  multiple-choice {
    display: block;
    padding-bottom: 1rem;
    color: var(--sl-color-text-accent);
  }

  form > * + * {
    margin-top: 1rem;
  }

  .opt-list {
    list-style: none;
    padding-inline-start: 0;
  }

  /* .footer {
		display: grid;
		grid-template-columns: 1fr;
		gap: 1rem;
	} */

  .submit,
  .answer {
    padding: 0.8rem;
    line-height: 1.4;
    max-width: 15em;
    border: 2px solid var(--sl-color-gray-4);
  }

  .submit {
    cursor: pointer;
    color: var(--sl-color-accent);
    background-color: white;
  }

  .submit:focus {
    background-color: hsl(224, 20%, 94%);
  }

  .submit:not(:focus-visible) {
    outline: none;
  }

  .submit:hover {
    background: var(--sl-color-text-accent);
    color: var(--sl-color-black);
    /* border-color: transparent; */
  }

  .submit:disabled,
  .submit:active {
    /* transform: translateY(0.25rem); */
  }

  .submit:disabled {
    background-color: hsl(224, 20%, 94%);
    color: hsl(224, 7%, 36%);
    opacity: 0.65;
    cursor: not-allowed;
  }

  .answer {
    text-align: center;
    border-color: transparent;
  }

  .correct {
    color: var(--sl-color-green-low);
    background-color: var(--sl-color-green);
  }

  .wrong {
    color: var(--sl-color-red-low);
    background-color: var(--sl-color-red);
  }
</style>

<script>
  class MultipleChoice extends HTMLElement {
    #defaultCorrectLabel: string;
    #defaultIncorrectLabel: string;
    #key: string;
    #submitEl: HTMLButtonElement;
    #answerEl: HTMLParagraphElement;

    constructor() {
      super();
      this.#defaultCorrectLabel = this.dataset.correctLabel!;
      this.#defaultIncorrectLabel = this.dataset.incorrectLabel!;
      this.#key = Math.random().toString();
      this.#submitEl = this.querySelector(".submit")!;
      this.#answerEl = this.querySelector(".answer")!;
      this.querySelectorAll(".opt-list > li").forEach((li) => this.#upgradeListItem(li));
    }

    #upgradeListItem(li: Element) {
      const option = li.querySelector('input[type="radio"]') as HTMLInputElement | null;
      if (!option) return;

      option.removeAttribute("disabled");
      option.setAttribute("name", this.#key);
      option.addEventListener("change", () => {
        this.#clearAnswer();
        this.#enableSubmit();
      });
      if (option.checked) this.#enableSubmit();
    }

    /** Clear the answer text and hide its container visually. */
    #clearAnswer() {
      this.#answerEl.innerText = "";
      this.#answerEl.classList.remove("wrong", "correct");
      this.#answerEl.classList.add("sr-only");
    }

    /** Show the answer result to the user. */
    #setAnswer(isCorrect: boolean) {
      const answerTemplate = this.querySelector("input:checked ~ template") as HTMLTemplateElement | null;
      if (answerTemplate) {
        this.#answerEl.replaceChildren(answerTemplate.content.cloneNode(true));
      } else {
        this.#answerEl.innerText = isCorrect ? this.#defaultCorrectLabel : this.#defaultIncorrectLabel;
      }
      this.#answerEl.classList.remove("sr-only", "wrong", "correct");
      this.#answerEl.classList.add(isCorrect ? "correct" : "wrong");
    }

    /** Activate the submit button, preparing it to evaluate the form when clicked. */
    #enableSubmit() {
      this.#submitEl.removeAttribute("disabled");
      this.#submitEl.classList.remove("sr-only");
      this.#submitEl.onclick = () => this.#submitAnswer();
    }

    /** Disable the submit button and hide it visually. */
    #disableSubmit() {
      this.#submitEl.setAttribute("disabled", "");
      this.#submitEl.classList.add("sr-only");
      this.#submitEl.onclick = null;
    }

    /** Check if the selected option is correct and display the result. */
    #submitAnswer() {
      const selection = this.querySelector("input:checked") as HTMLInputElement | null;
      if (!selection) return;

      this.#disableSubmit();
      const isCorrect = selection.dataset.isCorrect !== undefined && ["", "true"].includes(selection.dataset.isCorrect);
      this.#setAnswer(isCorrect);
    }
  }

  customElements.define("multiple-choice", MultipleChoice);
</script>
